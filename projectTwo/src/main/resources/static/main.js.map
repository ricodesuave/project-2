{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/club-creation-form/club-creation-form.component.css","webpack:///./src/app/components/club-creation-form/club-creation-form.component.html","webpack:///./src/app/components/club-creation-form/club-creation-form.component.ts","webpack:///./src/app/components/club-lookup/club-lookup.component.css","webpack:///./src/app/components/club-lookup/club-lookup.component.html","webpack:///./src/app/components/club-lookup/club-lookup.component.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/register/registration.component.css","webpack:///./src/app/components/register/registration.component.html","webpack:///./src/app/components/register/registration.component.ts","webpack:///./src/app/components/user-post/user-post.component.css","webpack:///./src/app/components/user-post/user-post.component.html","webpack:///./src/app/components/user-post/user-post.component.ts","webpack:///./src/app/material/material.module.ts","webpack:///./src/app/services/club-service.service.ts","webpack:///./src/app/services/login/auth.service.ts","webpack:///./src/app/services/reviews/reviews.service.ts","webpack:///./src/app/services/user/user.service.ts","webpack:///./src/environments/environment.prod.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { UserPostComponent } from './components/user-post/user-post.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegistrationComponent } from './components/register/registration.component';\n\nconst routes: Routes = [\n  {path: '', component: UserPostComponent},\n  {path: 'login', component: LoginComponent},\n  {path: 'register', component: RegistrationComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\n\nexport class AppRoutingModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<!-- \\n\\n<router-outlet></router-outlet> -->\\n<app-navbar></app-navbar>\\n<router-outlet></router-outlet>\\n\\n<!-- <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n    <div class=\\\"col-md-12\\\">\\n        <div class=\\\"card bg-dark my-5\\\">\\n        <div class=\\\"card-body\\\">\\n            <ul class=\\\"text-center list-inline py-3\\\">\\n            <li class=\\\"list-inline-item\\\"><a routerLink=\\\"/posts\\\" class=\\\"btn btn-info\\\">List Reviews</a></li>\\n            </ul>\\n        </div>\\n        </div>\\n        <router-outlet></router-outlet>\\n    </div>\\n    </div>\\n    \\n</div> -->\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'test';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatCheckboxModule} from '@angular/material/checkbox';\nimport { MatFormFieldModule} from '@angular/material/form-field';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport {\n  MatButtonModule, MatCardModule, MatDialogModule, MatInputModule, MatTableModule,\n  MatToolbarModule, MatMenuModule, MatIconModule, MatProgressSpinnerModule\n} from '@angular/material';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport { ClubCreationFormComponent } from './components/club-creation-form/club-creation-form.component';\nimport { ClubServiceService } from './services/club-service.service';\n\nimport { ReviewsService } from './services/reviews/reviews.service';\nimport { UserService } from './services/user/user.service';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { UserPostComponent } from './components/user-post/user-post.component';\nimport { ClubLookupComponent } from './components/club-lookup/club-lookup.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegistrationComponent } from './components/register/registration.component';\n\nimport { MaterialModule } from './material/material.module';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ClubCreationFormComponent,\n    NavbarComponent,\n    UserPostComponent,\n    ClubLookupComponent,\n    LoginComponent,\n    RegistrationComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatInputModule,\n    MatButtonModule,\n    MatProgressSpinnerModule,\n    MatIconModule,\n    NgbModule,\n    MaterialModule\n  ],\n  providers: [ReviewsService, UserService, ClubServiceService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2x1Yi1jcmVhdGlvbi1mb3JtL2NsdWItY3JlYXRpb24tZm9ybS5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<h1>Club Creation Form</h1>\\n<form [formGroup]=\\\"clubFormGroup\\\">\\n    <input type=\\\"hidden\\\" formControlName=\\\"ownerId\\\" value=\\\"9001\\\" readonly/>\\n\\n    <mat-form-field appearance=\\\"outline\\\">\\n        <mat-label>Club Name</mat-label>\\n        <input matInput type=\\\"text\\\" placeholder=\\\"Enter Club Name\\\" [(ngModel)]=\\\"value\\\" formControlName=\\\"clubName\\\"/>\\n        <button mat-button *ngIf=\\\"value\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"value=''\\\">\\n            <mat-icon>close</mat-icon>\\n        </button>\\n    </mat-form-field>\\n\\n    <br>\\n\\n    <mat-form-field appearance=\\\"outline\\\">\\n        <textarea matInput name=\\\"\\\" id=\\\"\\\" formControlName=\\\"clubDescription\\\"></textarea>\\n        <!-- <textarea matInput placeholder=\\\"Enter Club Name\\\" formControlName=\\\"clubDescription\\\"></textarea> -->\\n    </mat-form-field>\\n\\n    \\n    <div>\\n        <button type=\\\"button\\\" (click)=\\\"createClub()\\\">Create</button>\\n    </div>\\n\\n    \\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControlName, FormControl, Validators } from '@angular/forms';\nimport { ClubServiceService } from 'src/app/services/club-service.service';\nimport { Club } from 'src/app/models/club';\nimport { User } from 'src/app/models/user';\n\n@Component({\n  selector: 'app-club-creation-form',\n  templateUrl: './club-creation-form.component.html',\n  styleUrls: ['./club-creation-form.component.css']\n})\nexport class ClubCreationFormComponent implements OnInit {\n\n  value = '';\n\n  clubFormGroup: FormGroup;\n\n  constructor(private clubService: ClubServiceService) {}\n\n  ngOnInit() {\n    this.clubFormGroup = new FormGroup({\n      ownerId: new FormControl({value: 0}, Validators.required),\n      clubName: new FormControl({value: ''}, Validators.required),\n      clubDescription: new FormControl('', Validators.required)\n    });\n  }\n\n  createClub() {\n    // const input = {...this.clubFormGroup.value};\n    // console.log(input);\n    // const testUser: User = new User(9001, 'jose1@gmail.com', '123', 'jose', 'nunez', null);\n\n    // let val: Club = new Club(0, input.clubName, input.clubDescription, testUser);\n    // console.log(val);\n\n    // this.clubService.save(val).subscribe(data => {\n    //   console.log(data);\n    // });\n  }\n\n}\n\n\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2x1Yi1sb29rdXAvY2x1Yi1sb29rdXAuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div>\\n  <table>\\n    <thead>\\n    <tr>\\n      <th scope=\\\"col\\\">Club Name</th>\\n      <th scope=\\\"col\\\">Club Description</th>\\n      <th scope=\\\"col\\\">Owner</th>\\n      <th scope=\\\"col\\\">Options</th>\\n    </tr>\\n  </thead>\\n  <tbody id=\\\"club-lookup-body\\\">\\n    <tr *ngFor=\\\"let club of clubs\\\">\\n      <td>{{club.clubName}}</td>\\n      <td>{{club.clubDescription}}</td>\\n      <td>{{club.ownerId}}</td>\\n      <td>\\n        <button>Subscribe</button>\\n        <button>Unsubscribe</button></td>\\n    </tr>\\n  </tbody>\\n  </table>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Club } from 'src/app/models/club';\nimport { ClubServiceService } from 'src/app/services/club-service.service';\n\n\n@Component({\n  selector: 'app-club-lookup',\n  templateUrl: './club-lookup.component.html',\n  styleUrls: ['./club-lookup.component.css']\n})\nexport class ClubLookupComponent implements OnInit {\n\n  clubs: Club[];\n\n  constructor(private clubService: ClubServiceService) { }\n\n  ngOnInit() {\n    this.clubService.findAll().subscribe(data => {\n      this.clubs = data;\n    });\n  }\n}\n","module.exports = \".login-card{\\n    width: 250px;\\n    float: left;\\n}\\n\\n.center-div{\\n    margin: auto;\\n    width: auto;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtJQUNaLFdBQVc7QUFDZjs7QUFFQTtJQUNJLFlBQVk7SUFDWixXQUFXO0FBQ2YiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubG9naW4tY2FyZHtcbiAgICB3aWR0aDogMjUwcHg7XG4gICAgZmxvYXQ6IGxlZnQ7XG59XG5cbi5jZW50ZXItZGl2e1xuICAgIG1hcmdpbjogYXV0bztcbiAgICB3aWR0aDogYXV0bztcbn0iXX0= */\"","module.exports = \"<h2>Login</h2>\\n<form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">email</label>\\n        <input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && form.email.errors }\\\" />\\n        <div *ngIf=\\\"submitted && form.email.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"form.email.errors.required\\\">email is required</div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">Password</label>\\n        <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && form.password.errors }\\\" />\\n        <div *ngIf=\\\"submitted && form.password.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"form.password.errors.required\\\">Password is required</div>\\n        </div>\\n    </div>\\n    \\n    <div class=\\\"form-group\\\">\\n        <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Login</button>\\n        <img *ngIf=\\\"loading\\\" src=\\\"../../../assets/loading.gif\\\" />\\n        <a routerLink=\\\"/register\\\" class=\\\"btn btn-link\\\">Register</a>\\n    </div>\\n</form>\\n\\n<mat-progress\\n\"","import { Component, OnInit } from '@angular/core';\n\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\nimport { first } from 'rxjs/operators';\n\nimport { AuthService } from '../../services/login/auth.service';\nimport { User } from 'src/app/models/user';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  loading = false;\n  submitted = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n  ) {\n    // if already logged in, procede to home\n    if (this.authService.currentUserValue) {\n      this.router.navigate(['/']);\n    }\n    console.log('Login instatiation complete.');\n  }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n  get form() {\n    return this.loginForm.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    console.log(this.form.email.value);\n\n    if (this.loginForm.invalid) {\n      console.log('Invalid Form');\n      return;\n    }\n    this.loading = true;\n    console.log('Attempting to log in');\n    this.authService.login(this.form.email.value, this.form.password.value)\n      .pipe(first()).subscribe(\n        data => {\n          console.log('Logged in');\n          this.router.navigate(['/']);\n        },\n        error => {\n          console.log('Error Logging in');\n          this.loading = false;\n        }\n      );\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbmF2YmFyL25hdmJhci5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<nav class=\\\"navbar navbar-expand-md navbar-dark bg-dark static-top\\\">\\n  <a class=\\\"navbar-brand\\\" routerLink=\\\"/\\\">Bookz In Da Club </a>\\n\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarsExampleDefault\\\" aria-controls=\\\"navbarsExampleDefault\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\n  </button>\\n\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbar\\\">\\n    <ul class=\\\"navbar-nav mr-auto\\\">\\n      <li class=\\\"nav-item active\\\">\\n        <a class=\\\"nav-link\\\">Home <span class=\\\"sr-only\\\">(current)</span></a>\\n      </li>\\n      <li>\\n        <a *ngIf=\\\"currentUser\\\" class=\\\"nav-link\\\">Books<span class =\\\"sr-only\\\">(current)</span></a>\\n      </li>\\n      <li>\\n        <a a *ngIf=\\\"currentUser\\\" class=\\\"nav-link\\\">Clubs<span class=\\\"sr-only\\\">(current)</span></a>\\n      </li>\\n      <li ngbDropdown class=\\\"nav-item dropdown\\\">\\n        <span ngbDropdownToggle class=\\\"nav-link dropdown-toggle\\\" id=\\\"dropdown01\\\">Setting</span>\\n        <div ngbDropdownMenu class=\\\"dropdown-menu\\\" aria-labelledby=\\\"dropdown01\\\">\\n          <a *ngIf=\\\"!currentUser\\\" class=\\\"dropdown-item\\\" routerLink=\\\"/login\\\">Login</a>\\n          <a *ngIf=\\\"!currentUser\\\" class=\\\"dropdown-item\\\" routerLink=\\\"/register\\\">Register</a>\\n          <a *ngIf=\\\"currentUser\\\" class=\\\"dropdown-item\\\" (click)=\\\"logout()\\\">Logout</a>\\n        </div>\\n      </li>\\n      <li>\\n      </li>\\n    </ul>\\n  </div>\\n</nav>\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { User } from '../../models/user';\nimport { AuthService } from 'src/app/services/login/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnDestroy {\n\n  currentUser: User;\n  currentUserSub: Subscription;\n\n  constructor(private authService: AuthService, private router: Router) {\n    this.currentUserSub = this.authService.currentUser$.subscribe(user => {\n      this.currentUser = user;\n    });\n  }\n  ngOnDestroy() {\n    this.currentUserSub.unsubscribe();\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n  }\n}\n","module.exports = \".my-form{\\n    min-width: 150px;\\n    max-width: 300px;\\n    width: 100%;\\n}\\n.full-width {\\n    width: 250px;\\n    display: block;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9yZWdpc3Rlci9yZWdpc3RyYXRpb24uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsV0FBVztBQUNmO0FBQ0E7SUFDSSxZQUFZO0lBQ1osY0FBYztBQUNsQiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVnaXN0ZXIvcmVnaXN0cmF0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubXktZm9ybXtcbiAgICBtaW4td2lkdGg6IDE1MHB4O1xuICAgIG1heC13aWR0aDogMzAwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG59XG4uZnVsbC13aWR0aCB7XG4gICAgd2lkdGg6IDI1MHB4O1xuICAgIGRpc3BsYXk6IGJsb2NrO1xufSJdfQ== */\"","module.exports = \"<!-- <h2>Register</h2>\\n<form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    \\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"firstName\\\">First Name</label>\\n        <input type=\\\"text\\\" formControlName=\\\"firstName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && form.firstName.errors }\\\" />\\n        <div *ngIf=\\\"submitted && form.firstName.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"form.firstName.errors.required\\\">First Name is required</div>\\n        </div>\\n    </div>\\n    \\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"lastName\\\">Last Name</label>\\n        <input type=\\\"text\\\" formControlName=\\\"lastName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && form.lastName.errors }\\\" />\\n        <div *ngIf=\\\"submitted && form.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"form.lastName.errors.required\\\">Last Name is required</div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"dateOfBirth\\\">Date Of Birth</label>\\n        <input type=\\\"date\\\" formControlName=\\\"dateOfBirth\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && form.dateOfBirth.errors }\\\" />\\n        <div *ngIf=\\\"submitted && form.dateOfBirth.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"form.dateOfBirth.errors.required\\\">Date is required</div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">email</label>\\n        <input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && form.email.errors }\\\" />\\n        <div *ngIf=\\\"submitted && form.email.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"form.email.errors.required\\\">email is required</div>\\n        </div>\\n    </div>\\n    \\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"password\\\">Password</label>\\n        <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && form.password.errors }\\\" />\\n        <div *ngIf=\\\"submitted && form.password.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"form.password.errors.required\\\">Password is required</div>\\n            <div *ngIf=\\\"form.password.errors.minlength\\\">Password must be at least 6 characters</div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n        <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Register</button>\\n        <img *ngIf=\\\"loading\\\" src=\\\"../../../assets/loading.gif\\\" />\\n        <a [routerLink]=\\\"['/login']\\\" class=\\\"btn btn-link\\\">Cancel</a>\\n    </div>\\n</form> -->\\n\\n<mat-card-content>\\n    <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n        <mat-form-field class=\\\"full-width\\\">\\n\\n            <mat-label>First Name</mat-label>\\n            <input matInput formControlName=\\\"firstName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && form.firstName.errors }\\\" />\\n            <!-- <div *ngIf=\\\"submitted && form.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"form.lastName.errors.required\\\">Last Name is required</div>\\n                    </div> -->\\n        </mat-form-field>\\n\\n        <mat-form-field class=\\\"full-width\\\">\\n            <mat-label>Last Name</mat-label>\\n            <input matInput formControlName=\\\"lastName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && form.lastName.errors }\\\" />\\n                <!-- <div *ngIf=\\\"submitted && form.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"form.lastName.errors.required\\\">Last Name is required</div>\\n                    </div> -->\\n        </mat-form-field>\\n\\n        <!-- <mat-form-field class=\\\"full-width\\\">\\n            <mat-label>Date Of Birth</mat-label>\\n            <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\" formControlName=\\\"dateOfBirth\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && form.dateOfBirth.errors }\\\">\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n            <mat-datepicker #myDatepicker startView=\\\"year\\\" [startAt]=\\\"startDate\\\"></mat-datepicker> \\n        </mat-form-field> -->\\n\\n        <mat-form-field>\\n                <mat-label>Date Of Birth</mat-label>\\n                <input matInput [matDatepicker]=\\\"myDatepicker\\\" placeholder=\\\"Choose a date\\\" formControlName=\\\"dateOfBirth\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && form.dateOfBirth.errors }\\\">\\n                <mat-datepicker-toggle matSuffix [for]=\\\"myDatepicker\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #myDatepicker></mat-datepicker>\\n            </mat-form-field>\\n\\n        <mat-form-field class=\\\"full-width\\\">\\n            <mat-label>Email Address</mat-label>\\n            <input matInput formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && form.email.errors }\\\" />\\n        </mat-form-field>\\n\\n        <mat-form-field class=\\\"full-width\\\">\\n            <mat-label>Password</mat-label>\\n            <input matInput formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && form.password.errors }\\\" />\\n        </mat-form-field>\\n    </form>\\n</mat-card-content>\\n<mat-card-actions>\\n<button mat-raised-button (click)=\\\"onSubmit()\\\" [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Register</button>\\n</mat-card-actions>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { UserService } from 'src/app/services/user/user.service';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from 'src/app/services/login/auth.service';\nimport { first } from 'rxjs/operators';\n\nimport { MaterialModule } from '../../material/material.module';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css']\n})\nexport class RegistrationComponent implements OnInit {\n\n  registerForm: FormGroup;\n  loading = false;\n  submitted = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private userService: UserService\n  ) {\n    if (this.authService.currentUserValue) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  ngOnInit() {\n    this.registerForm = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      dateOfBirth: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n  get form() {\n    return this.registerForm.controls;\n  }\n  onSubmit() {\n    console.log('Submitting Form');\n\n    this.submitted = true;\n    console.log('Checking validity');\n\n    if (this.registerForm.invalid) {\n      console.log('Form Invalid');\n      return;\n    }\n    console.log('Form Valid');\n    console.log(this.form.dateOfBirth.value);\n    this.loading = true;\n    this.userService.register(this.registerForm.value)\n    .pipe(first()).subscribe(\n      data => {\n        console.log('Registration successful');\n        console.dir(data);\n        this.router.navigate(['/login']);\n      },\n      error => {\n        console.log('An error has occured.');\n        console.dir(error);\n        this.loading = false;\n      });\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdXNlci1wb3N0L3VzZXItcG9zdC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"card my-5\\\">\\n  <div class=\\\"card-body\\\">\\n    <div>\\n    </div>\\n    <table class=\\\"table table-bordered table-striped\\\">\\n      <thead class=\\\"thead-dark\\\">\\n        <tr>\\n          <th scope=\\\"col\\\">User Id</th>\\n          <th scope=\\\"col\\\">Book Id</th>\\n          <th scope=\\\"col\\\">Description</th>\\n          <th scope=\\\"col\\\">Rating</th>\\n          <th scope=\\\"col\\\">Date</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor=\\\"let review of reviews\\\">\\n          <td>{{ review.userId }}</td>\\n          <td>{{ review.bookId }}</td>\\n          <td>{{ review.reviewDescription }}</td>\\n          <td>{{ review.rating }}</td>\\n          <td>{{ review.reviewDate }}</td>\\n        </tr>\\n      </tbody>\\n      </table>\\n  </div>\\n</div>\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ReviewsService } from 'src/app/services/reviews/reviews.service';\nimport { Review } from 'src/app/models/review';\n\n@Component({\n  selector: 'app-user-post',\n  templateUrl: './user-post.component.html',\n  styleUrls: ['./user-post.component.css']\n})\nexport class UserPostComponent implements OnInit {\n\n  reviews: Review[];\n  constructor(private reviewService: ReviewsService) { }\n\n  ngOnInit() {\n    this.reviewService.getAll().subscribe(data => {\n      this.reviews = data;\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {MatNativeDateModule, MatIconModule,\n  MatButtonModule, MatCheckboxModule, MatToolbarModule,\n  MatCardModule, MatFormFieldModule,\n  MatInputModule, MatRadioModule,\n  MatListModule, } from '@angular/material';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, MatNativeDateModule, MatDatepickerModule,\n    MatIconModule, MatButtonModule, MatCheckboxModule,\n    MatToolbarModule, FormsModule, MatCardModule,\n    MatFormFieldModule, MatInputModule, MatListModule,\n    MatRadioModule, ],\n\n    exports: [MatNativeDateModule, FormsModule,\n      MatDatepickerModule, MatIconModule,\n      MatButtonModule, MatCheckboxModule,\n      MatToolbarModule, MatCardModule,\n      MatFormFieldModule, MatInputModule,\n      MatListModule, MatRadioModule, ],\n})\nexport class MaterialModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Club } from '../models/club';\nimport {Observable} from 'rxjs';\nimport { environment as envir } from '../../environments/environment.prod';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClubServiceService {\n\n  constructor(private http: HttpClient) { }\n\n  public findAll(): Observable<Club[]> {\n    return this.http.get<Club[]>(`${envir.baseUrl}/clubs/clubs`);\n  }\n\n  save(club: Club): Observable<Club>{\n    return this.http.post<Club>(`${envir.baseUrl}/clubs/save`, club);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment as envir } from '../../../environments/environment';\nimport { User } from '../../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private currentUserSubject: BehaviorSubject<User>;\n  currentUser$: Observable<User>;\n\n  constructor(private http: HttpClient) {\n    this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('current-user')));\n    this.currentUser$ = this.currentUserSubject.asObservable();\n  }\n\n  get currentUserValue(): User {\n    return this.currentUserSubject.value;\n  }\n\n  login(email: string, password: string) {\n    console.log('login function');\n\n    console.log(email);\n\n    return this.http.post<any>(`${envir.baseUrl}/auth/login`, {email, password})\n      .pipe(map(currentUser => {\n        if (currentUser) {\n          localStorage.setItem('current-user', JSON.stringify(currentUser));\n          this.currentUserSubject.next(currentUser);\n        }\n        return currentUser;\n      }));\n  }\n\n  logout() {\n    localStorage.removeItem('current-user');\n    this.currentUserSubject.next(null);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment as envir } from '../../../environments/environment'\nimport { Review } from 'src/app/models/review';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReviewsService {\n\n  constructor( private http: HttpClient) { }\n\n  getAll() {\n    return this.http.get<Review[]>(`${envir.baseUrl}/review/reviews`);\n  }\n\n  getById() {\n    return this.http.get<Review>(`${envir.baseUrl}/review/review`);\n  }\n\n  save( review: Review ) {\n    this.http.post<Review>(`${envir.baseUrl}/review/save`, review);\n  }\n\n  update( review: Review ) {\n    this.http.put<Review>(`${envir.baseUrl}/review/update`, review);\n  }\n\n  delete( review: Review ) {\n    this.http.delete<Review>(`${envir.baseUrl}/review/delete`);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { environment as envir } from '../../../environments/environment';\nimport { User } from 'src/app/models/user';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor( private http: HttpClient ) { }\n\n  getAll() {\n    return this.http.get<User[]>(`${envir.baseUrl}/user/users`);\n  }\n\n  getById() {\n    return this.http.get<User>(`${envir.baseUrl}/user/user`);\n  }\n\n  save(user: User) {\n    return this.http.post<User>(`${envir.baseUrl}/user/save`, user);\n  }\n\n  update(user: User) {\n    return this.http.put<User>(`${envir.baseUrl}/user/update`, user);\n  }\n\n  delete(user: User) {\n    return this.http.delete<User>(`${envir.baseUrl}/user/delete`);\n  }\n\n  register(user: User) {\n    console.log('Service: Register');\n    return this.http.post<User>(`${envir.baseUrl}/user/save`, user);\n  }\n}\n\n","// this is used to commnunicate with JAVA app\nexport const environment = {\n  production: true,\n  baseUrl: \"http://localhost:8080/\"\n};\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\n//Mock data with JSON-SERVER\nexport const environment = {\n  production: false,\n  baseUrl: 'http://localhost:8080'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}